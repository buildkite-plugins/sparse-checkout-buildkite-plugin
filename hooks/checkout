#!/bin/bash

set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck source=lib/plugin.bash
. "$DIR/../lib/plugin.bash"

NO_CONE_OPTION="$(plugin_read_config NO_CONE "false")"
NO_CONE_PARAM=""
[[ $NO_CONE_OPTION = false ]] || NO_CONE_PARAM="--no-cone"

if plugin_read_list_into_result PATHS; then
    CHECKOUT_PATHS=("${result[@]}")
else
    echo "Missing 'paths' option in the plugin"
    exit 1
fi

SKIP_SSH_KEYSCAN_OPTION="$(plugin_read_config SKIP_SSH_KEYSCAN "false")"

if [[ -n "${BUILDKITE_REPO_SSH_HOST:-}" ]] && [[ "${SKIP_SSH_KEYSCAN_OPTION}" = "false" ]] ; then
    echo "Scanning SSH keys for remote git repository"
    [[ -d ~/.ssh ]] || mkdir -p ~/.ssh
    ssh-keyscan "${BUILDKITE_REPO_SSH_HOST}" >> ~/.ssh/known_hosts
else
    echo "Skipped SSH keyscan"
fi

echo "Creating sparse-checkout with paths: ${CHECKOUT_PATHS[*]}"

# clone the repo without checking out files if it does not exist already
if [[ ! -d .git ]]; then
    git clone \
        --depth 1 \
        --filter=blob:none \
        --no-checkout \
        ${BUILDKITE_REPO_MIRROR:+--reference "$BUILDKITE_REPO_MIRROR"} \
        -v \
        "${BUILDKITE_REPO}" .
fi

git clean -ffxdq

# fetch branch if commit is HEAD, respecting BUILDKITE_GIT_FETCH_FLAGS if set
FETCH_FLAGS="${BUILDKITE_GIT_FETCH_FLAGS:-}"
if [[ ${BUILDKITE_COMMIT} = "HEAD" ]]; then
    git fetch --depth 1 ${FETCH_FLAGS} origin "${BUILDKITE_BRANCH}"
else
    git fetch --depth 1 ${FETCH_FLAGS} origin "${BUILDKITE_COMMIT}"
fi

git sparse-checkout set ${NO_CONE_PARAM:+--no-cone} "${CHECKOUT_PATHS[@]}"
if [[ ${BUILDKITE_COMMIT} = "HEAD" ]]; then
   git checkout FETCH_HEAD
else
   git checkout "${BUILDKITE_COMMIT}"
fi
